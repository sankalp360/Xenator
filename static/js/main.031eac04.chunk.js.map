{"version":3,"sources":["logo.svg","components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","onClick","toggleMode","role","htmlFor","TextForm","useState","text","setText","timeToRead","split","length","setCharAt","str","index","chr","substring","style","color","heading","rows","value","backgroundColor","onChange","event","target","newText","toUpperCase","showAlert","toLowerCase","curr","i","charAt","navigator","clipboard","writeText","join","Alert","alert","word","lower","slice","capitalize","msg","defaultProps","aboutText","App","setMode","setAlert","message","setTimeout","document","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.031eac04.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport {\r\n    BrowserRouter as Router,\r\n    Link\r\n} from 'react-router-dom';\r\nexport default function Navbar(props) {\r\n    return (\r\n        <>\r\n            <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n                <div className=\"container-fluid\">\r\n                    <href className=\"navbar-brand\" href=\"#\">{props.title}</href>\r\n                    <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                        <span className=\"navbar-toggler-icon\" />\r\n                    </button>\r\n                    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                        <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n                            <li className=\"nav-item\">\r\n                                <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\r\n                            </li>\r\n                            {/* <li className=\"nav-item\">\r\n                                <Link className=\"nav-link\" to=\"/about\">{props.aboutText}</Link>\r\n                            </li> */}\r\n\r\n                        </ul>\r\n                        <div className={`form-check form-switch text-${props.mode === 'light' ? 'dark' : 'light'}`}>\r\n                            <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\" />\r\n                            <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Dark Mode</label>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </nav>\r\n        </>\r\n    )\r\n}\r\n\r\nNavbar.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    aboutText: PropTypes.string\r\n}\r\n\r\nNavbar.defaultProps = {\r\n    title: \"Set title Here\",\r\n    aboutText: \"About Text Here\"\r\n}\r\n","import React, { useState } from 'react';\r\n\r\nexport default function TextForm(props) {\r\n    const [text, setText] = useState('');\r\n    let timeToRead = 0.008 * text.split(\" \").length;\r\n\r\n    // state can be changed only by set function\r\n    function setCharAt(str, index, chr) {\r\n        if (index > str.length - 1) return str;\r\n        return str.substring(0, index) + chr + str.substring(index + 1);\r\n    }\r\n\r\n    const handleOnChange = (event) => {\r\n        // console.log('On Change')\r\n        setText(event.target.value);\r\n    }\r\n\r\n    const handleUpClick = () => {\r\n        // console.log('Uppercase was clciked');\r\n        let newText = text.toUpperCase();\r\n        setText(newText);\r\n        props.showAlert('Converted to Uppercase', 'success');\r\n    }\r\n    const handleLowClick = () => {\r\n        // console.log('Uppercase was clciked');\r\n        let newText = text.toLowerCase();\r\n        setText(newText);\r\n        props.showAlert('Converted to Lowercase', 'success');\r\n\r\n    }\r\n    const handleCamelClick = () => {\r\n        // console.log('Uppercase was clciked');\r\n        let newText = text.toLowerCase();\r\n        setText(newText);\r\n        let curr = newText;\r\n\r\n        for (let i = 0; i < newText.length - 1; i++) {\r\n\r\n            if (i === 0) {\r\n                curr = setCharAt(curr, i, curr.charAt(i).toUpperCase());\r\n            }\r\n            if (curr.charAt(i) === ' ') {\r\n                curr = setCharAt(curr, i + 1, curr.charAt(i + 1).toUpperCase());\r\n            }\r\n            setText(curr);\r\n        }\r\n\r\n        props.showAlert('Converted to Camelcase', 'success');\r\n\r\n    }\r\n\r\n    const handleCopy = () => {\r\n        let newText = text;\r\n        navigator.clipboard.writeText(newText);\r\n        props.showAlert('Text Copied to Clipboard', 'success');\r\n\r\n    }\r\n\r\n    const handleExtraSpaces = () => {\r\n        let newText = text.split(/[ ]+/);\r\n        setText(newText.join(\" \"));\r\n        props.showAlert('Extra Spaces Removed', 'success');\r\n\r\n    }\r\n    const handleConHClick = () => {\r\n        // console.log('Uppercase was clciked');\r\n        // let options = {\r\n        //     sourceLanguage:\r\n        //         google.elements.transliteration.LanguageCode.ENGLISH,\r\n        //     destinationLanguage:\r\n        //         [google.elements.transliteration.LanguageCode.HINDI],\r\n        //     shortcutKey: 'ctrl+g',\r\n        //     transliterationEnabled: true\r\n        // };\r\n\r\n        // let control = new\r\n        //     google.elements.transliteration.TransliterationControl(options);\r\n        // control.makeTransliteratable([\"txtEnglish\"]);\r\n        // setText(control);\r\n    }\r\n\r\n    const handleCTClick = () => {\r\n        // console.log('Uppercase was clciked');\r\n        let newText = \"\";\r\n        setText(newText);\r\n        props.showAlert('Text Cleared', 'success');\r\n    }\r\n    return (\r\n        <>\r\n            <div className='container my-2' style={{ color: props.mode === 'dark' ? 'white' : 'black' }}>\r\n                <h1>{props.heading}</h1>\r\n                <div className=\"mb-3\">\r\n                    <textarea className=\"form-control\" id=\"myBox\" rows=\"8\" value={text} style={{ backgroundColor: props.mode === 'dark' ? '#343a40' : 'white', color: props.mode === 'dark' ? 'white' : 'black' }} onChange={handleOnChange} ></textarea>\r\n                </div>\r\n                <div>\r\n                    <button className=\"btn btn-primary mx-1 \" onClick={handleUpClick}>Convert to Upper Case</button>\r\n                    <button className=\"btn btn-primary mx-1\" onClick={handleLowClick}>Convert to Lower Case</button>\r\n                    <button className=\"btn btn-primary mx-1\" onClick={handleCamelClick}>Convert to Camel Case</button>\r\n                    <button className=\"btn btn-primary mx-1\" onClick={handleCopy}>Copy Text</button>\r\n                    <button className=\"btn btn-primary mx-1\" onClick={handleExtraSpaces}>Remove Extra Spaces</button>\r\n                    <button className=\"btn btn-primary mx-1\" onClick={handleCTClick}>Clear text</button>\r\n                </div>\r\n                {/* <h1></h1>\r\n                <button className=\"btn btn-primary mx-1\" onClick={handleConHClick}>Convert English to Hindi</button>\r\n                <button className=\"btn btn-primary mx-1\" onClick={handleConHClick}>Convert Hindi to English</button> */}\r\n\r\n            </div>\r\n            <div className=\"container my-5\" style={{ color: props.mode === 'dark' ? 'white' : 'black' }}>\r\n                <h2>Your text summary</h2>\r\n                <p>{text.split(\" \").length} words and {text.length} characters</p>\r\n                <p>{timeToRead} Minutes time to read text</p>\r\n\r\n            </div>\r\n            <div className=\"container my-5\" style={{ color: props.mode === 'dark' ? 'white' : 'black' }}>\r\n                <h2>Preview</h2>\r\n                <p>{text.length > 0 ? text : \"Enter Something in Text Box to Preview\"}</p>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Alert(props) {\r\n\r\n    const capitalize = (word) => {\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n\r\n    return (\r\n        props.alert && <div>\r\n            <div className={`alert alert-${props.alert.type} alert-dismissible fade show role=\"alert\"`}>\r\n                <strong>\r\n                    {`${capitalize(props.alert.type)} : `}\r\n                </strong>\r\n                {props.alert.msg}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import logo from './logo.svg';\nimport './App.css';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport About from './components/About';\nimport React, { useState } from 'react'\nimport Alert from './components/Alert';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from 'react-router-dom';\n\n// function based component \n\nfunction App() {\n  const [mode, setMode] = useState('light')\n  const [alert, setAlert] = useState(null);\n\n  const showAlert = (message, type) => {\n    // type - it is the type of alert you want to send in Bootstrap.\n    setAlert({\n      msg: message,\n      type: type\n    })\n    setTimeout(() => {\n      setAlert(null);\n    }, 1200);\n  }\n  const toggleMode = () => {\n    if (mode === 'light') {\n      setMode('dark');\n      document.body.style.backgroundColor = '#042743';\n      showAlert('Dark mode has been enabled', 'success');\n    }\n    else {\n      setMode('light');\n      document.body.style.backgroundColor = 'white';\n      showAlert('Light mode has been enabled', 'success');\n    }\n  }\n  return (\n    <>\n      {/* <Router> */}\n      <Navbar title=\"Xenitor\" aboutText=\"About\" mode={mode} toggleMode={toggleMode} />\n      <Alert alert={alert} />\n      <div className=\"container my-5\">\n        {/* <Switch>\n            <Route exact path=\"/about\">\n              <About mode={mode} />\n            </Route>\n            <Route exact path=\"/\"> */}\n        <TextForm showAlert={showAlert} heading=\"Enter the text below to analyze:\" mode={mode} />\n        {/* </Route>\n          </Switch> */}\n\n      </div>\n      {/* </Router> */}\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom'; \nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}